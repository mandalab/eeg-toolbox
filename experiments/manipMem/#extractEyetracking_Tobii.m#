function [] = extractEyetracking_Tobii(subject, behDir, sessionName)
% confirm session file exists
% for now
etLogFile = fullfile(behDir,sessionName,'eyetracking.log');
etLogFile = fullfile(behDir,'eyetracking.log');

etLogFile
fid    = fopen(etLogFile,'r');
if (fid==-1); error('Session.log not found: \n %s \n Exiting.',etLogFile);
else [sessionDir,~,~] = fileparts(etLogFile); end

% convert session folder name into a number.  
sessionNum = str2num(sessionName(end))

% read session.log line-by-line and convert to events structure
events     = [];
index      = 1;

ct = 0
while 1
  thisLine = fgetl(fid);
  if thisLine==-1; break; end
  
  % convert string into cell array for each element in string
  xTOT = textscan(thisLine,'%s',50);
  thisLineStr = {};
  for k = 1:length(xTOT),
    if ~isempty(xTOT{k}),
            thisLineStr = cat(2,thisLineStr,xTOT{k});
    end
  end
  if length(thisLineStr)<4; continue; end
  ct = ct + 1;
  coords(ct).mstime = str2num(thisLineStr{1});
  coords(ct).devtime = str2num(thisLineStr{2});
  coords(ct).rx = str2num(thisLineStr{3});
  coords(ct).ry = str2num(thisLineStr{4});
  coords(ct).lx = str2num(thisLineStr{5});
  coords(ct).ly = str2num(thisLineStr{6});
  coords(ct).rp = str2num(thisLineStr{7});
  coords(ct).lp = str2num(thisLineStr{8});

end 
fclose(fid);  



keyboard

[{events.type}; {events.enc}; {events.ret}; {events.added}; ...
 {events.removed}; {events.repeated}; {events.correct}; {events.rt}; ...
{events.mstime}]
keyboard



% ret_events = events(strcmp({events.type},'RETIMG'));


% ret_add = ret_events([ret_events.added]==1);
% c = logical([ret_add.correct]); 
% i = logical(~[ret_add.correct]);
% crt = [ret_add(c).rt];
% irt = [ret_add(i).rt];

% fprintf(['ADD CORR: %d \n'],sum(c))
% fprintf(['ADD INCO: %d \n'],sum(i))
% fprintf(['ADD PERC: %d \n'],round(sum([ret_add.correct])/length([ret_add])*100))
% fprintf(['ADD CORR RT: %d +- %d \n'],round(mean(crt)),round(std(crt)))
% fprintf(['ADD INCO RT: %d +- %d \n'],round(mean(irt)),round(std(irt)))
% fprintf('\n\n')



% ret_rem = ret_events([ret_events.removed]==1);
% c = logical([ret_rem.correct]); 
% i = logical(~[ret_rem.correct]);
% crt = [ret_rem(c).rt];
% irt = [ret_rem(i).rt];

% fprintf(['REM CORR: %d \n'],sum(c))
% fprintf(['REM INCO: %d \n'],sum(i))
% fprintf(['REM PERC: %d \n'],round(sum([ret_rem.correct])/length([ret_rem])*100))
% fprintf(['REM CORR RT: %d +- %d \n'],round(mean(crt)),round(std(crt)))
% fprintf(['REM INCO RT: %d +- %d \n'],round(mean(irt)),round(std(irt)))
% fprintf('\n\n')

% ret_rep = ret_events([ret_events.repeated]==1);
% c = logical([ret_rep.correct]); 
% i = logical(~[ret_rep.correct]);
% crt = [ret_rep(c).rt];
% irt = [ret_rep(i).rt];

% fprintf(['REP CORR: %d \n'],sum(c))
% fprintf(['REP INCO: %d \n'],sum(i))
% fprintf(['REP PERC: %d \n'],round(sum([ret_rep.correct])/length([ret_rep])*100))
% fprintf(['REP CORR RT: %d +- %d \n'],round(mean(crt)),round(std(crt)))
% fprintf(['REP INCO RT: %d +- %d \n'],round(mean(irt)),round(std(irt)))


